== 11970 Message Controller Generation

=== 1 Abstract

When connecting an xtUML-generated application to a browser-based client it is often necessary to produce a message controller class that serves as an intermediary between the xtUML server application and the communication mechanism to the client(s). It contains a method for each port activity of a marked interface. These methods handle serialization of messaging to the client and deserialization of messaging from the client to the xtUML application. 

This topic, <<dr-1>>, now subsumes <<dr-2>>. 

=== 2 Introduction and Background

Some web frameworks, such as Spring, require a message controller class to handle message traffic flowing between a server application and its clients.   Manually writing such classes is tedious and error-prone, so this feature automates the process.

Refer to the hand-coded message controller classes within the 
https://github.com/johnrwolfe/CarPark/tree/master/Deployment/src/main/java/deployment[CarPark Deployment project] 
for examples.

The CarPark example employs a _shell component_ to represent each type of client.  This idiom minimizes the number of generated files that must be manually modified and maintained when connecting a generated application to a client without modifying the model compiler.  However, the shell component adds no value and can be eliminated once the model compiler is capable of generating message controllers.

=== 3 Requirements

. A mark specifies for which ports a message controller class must be generated.
. WebSocket communication within the Spring framework is supported.

=== 4 Analysis

Currently, only WebSocket communication within the Spring framework is supported.  

Marking is applied on a port boundary, and the generated message controller class is placed 
within the same package as the generated port class for the marked port.

Eliminating the shell component requires that the generated port and message controller classes
communicate directly with one another, so in addition to generating a message controller class
this feature modifies the generated port class accordingly.

=== 5 Design

The message controller must provide methods for handling messages outgoing from the application and inbound to the application.

The Spring framework requires that an inbound message handling method be prefixed with a '@MessageMapping (/xxxx)" annotation where xxx names the message to be handled by the method. The handler method invokes the corresponding port activity in the application, extracting parameters from the received message instance. 

Messages originating from an application port activity invoke an outbound handler method which creates an instance of the appropriate message and invokes Spring's "convertAndSend" adding a destination identifier. The destination identifier is of the form "/topic/xxx/yyy"; a client can subscribe to topic xxx, perhaps refined by yyy to identify a particular client instance.


=== 6 Work required

. Add a mark named `SpringWebSocket` to be applied to a port.
. Develop a template for generation of a Java class corresponding to a message controller.
. Develop template(s) for both inbound and outbound message handling in the message controller.
. Modify port templates as necessary to directly invoke the outbound message controller methods.
. Develop a 'render message controller' operation to be invoked from the port render operation.

=== 7 Implementation Comments

Branch https://github.com/amullarney/ciera/tree/Ciera11970_msgCtrl is a prototype of message controller generation. +
It does not take the step of eliminating the shell component.

=== 8 Acceptance Test

An existing application should be built with suggested markings and tested with browser clients.

=== 9 User Documentation

Describe the end user documentation that was added for this change.

=== 10 Code Changes

https://github.com/amullarney/ciera/tree/Ciera11970_msgCtrl


=== 11 Document References

In this section, list all the documents that the reader may need to refer to.
Give the full path to reference a file.

. [[dr-1]] https://support.onefact.net/issues/11970
. [[dr-2]] https://support.onefact.net/issues/11971


