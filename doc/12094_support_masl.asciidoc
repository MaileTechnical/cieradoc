== Support MASL Translation

=== 1 Abstract

As of early 2021, Ciera supports xtUML/OAL input models only.  This note
outlines the support of translation of MASL models to Ciera/Java target
architecture.

=== 2 Introduction and Background

Ciera is a mostly general purpose xtUML to Java model compiler with a few
tactical architectural choices favoring its use as a model compiler model
compiler.  This means that it includes features that make it useful in the
development of model-based model compilers.  These extra features do not
detract from its use in vanilla or enterprise Java application
development.

==== 2.1 Deployments <<dr-2>>

As of early 2021, Ciera does not support Deployments.

Deployments were added to BridgePoint in 2019 to natively support in xtUML
the idiom of system modeling used by MASL modelers. In this flavor of
modeling, domains provide publicly available services and define a set of
service dependencies grouped in terminators.  Domains are then wired
together with a deployment which links calls from one domain terminator to
one or more publicly available services on other domains in the system as
defined within the Deployment.

==== 2.3 Stratus Project <<dr-3>>

As of early 2021, Ciera does not support translation of MASL.  However,
a parser/loader for MASL does exist as an artifact of the <<dr-3,Stratus>>
project.

The Stratus project was commissioned to parse and load MASL models
(including action language) into an xtUML metamodel. This project paves
the way for MASL support in Ciera, since it provides the means to load
MASL into a model which can then be traversed and used to populate a Ciera
target model. A proof of concept model based model compiler which
emitted text was produced along with this project.

=== 3 Requirements

This section enumerates requirements for MASL-to-Java capabilities within
Ciera.

==== 3.1 Ciera Base

Ciera is an extant model compiler generating Java from xtUML with OAL
activities.  Unless explicitly specified, existing Ciera architectural
functionality will be retained for the MASL-to-Java translator.  In other
words, for requirements purposes of capability already in place, the
existing Ciera represents the __de facto__ specification for this project.

==== 3.2 MASL C++ Base

Likewise, the existing MASL-to-C++ model compiler (commonly referred to as
the 'MASL model compiler') represents another pool of behavior to inform
new capabilities being added to Ciera.  MASL-to-C++ is not a specification
but may serve as "prior art" or as a "preferred embodiment" for
corresponding new features in Ciera MASL-to-Java.

==== 3.3 MASL Translation
A two (or more) phase chained translation approach is taken by Ciera.
Initially, a source model is queried and populated into the Ciera model of
architecture and target.  Afterwards, the target model is tranformed into
textual Java.

===== 3.3.1 MASL to Ciera Translation
Ciera shall support model-to-model (M2M) translation of MASL models (from
the OOA of MASL) into the Ciera/Java architecture target models.

===== 3.3.2 Textual MASL Source
MASL-to-Java translation shall support textual MASL model source (BridgePoint
editor not required).

===== 3.3.3 MASL-idiom xtUML Source
MASL-to-Java translation shall support xtUML model source (BridgePoint
editor may be required).

==== 3.4 Deployments
Support for Deployments shall be added to Ciera to generate linked Java
runnable systems.

===== 3.4.1 xtUML-OAL Deployments
Deployment support shall be added to Ciera to translate xtUML-OAL idiom
models.

===== 3.4.2 xtUML-MASL Deployments
Deployment support shall be added to Ciera to translate xtUML-MASL idiom
models.

==== 3.5 Independent Domains
Ciera shall be extended to support individual independent compilation
of domains (components).

==== 3.6 Persistence
Ciera supports persistence through the loading and serializing of SQL
format files as well as supplying a 'load-API' (create/set/relate).

Currently, Ciera supports a "load-cache-dump" persistence approach which
provides runtime operation primarily in-memory.  Instances are loaded at
start-up and persisted at exit.  Experimentation has been done with
loading/persisting at state transitions.

===== 3.6.1 Persistence Profile
MASL-to-Java Ciera shall persist ...

NOTE:  *TBD*  EITHER in-memory OR persistent storage?  write-through?
       caching with persistence transaction chain?  class-level marking?
       attribute-level marking?

==== 3.7 Referential Integrity
Runtime referential integrity shall be supplied by MASL-to-Java Ciera.
The level of consistency checking shall be roughly as good as the present
MASL-to-C++ model compiler.

==== 3.8 MASL-Specific Features
4 Ciera shall be extended to support MASL-specific features not currently
supported by the model compiler.

===== 3.8.1 Feature by Feature Analysis
Analysis shall be conducted and subsequently reviewed with key user groups
to determine and specify this feature set.  The feature set may not
exhaustively cover the MASL specification.  Omissions shall be documented.

==== 3.9 Test Coverage
Testing of coverage and correctness shall be conducted using a set of standard
example models.  The test model set shall be produced and reviewed as a
collaboration with key user groups.

=== 4 Analysis

Model based model compilation is centered around transformation of an
instance population of a source model to a target model. For Ciera, the
target model is well defined and the process to render to code is
complete. The bulk of this project will be the challenge of loading MASL into
a source model and providing transformation functions to convert instances
of the source model to the existing Ciera architecture model.
Additionally, the target model must be extended in minor ways to
support key features of MASL, however it has already been designed
with this in mind.

==== 4.1 Source model selection

There are two possibilities for the source model:

. xtUML metamodel with additional extensions for MASL action language
. The MASL metamodel produced by the Stratus project <<dr-3>>

Support for the structural portions of the xtUML metamodel is already in
place, however there is no support for MASL loading or representation of
MASL activities in the xtUML metamodel. The MASL metamodel from the
Stratus project covers all of the MASL language and already supports
instance loading from MASL text. This model shall be used as the loader
for the MASL flavored Ciera.

The existing textual MASL export tool (compiler) for BridgePoint can be
used to render models maintained directly in BridgePoint to textual MASL
before being passed to Ciera as part of a model compiler chain.  This
process may require a BridgePoint installation on the system where the
build occurs.

==== 4.2 Target model/architecure extensions

===== 4.2.1 Deployments

MASL models follow a "deployment" idiom for combining application domains
into a system. These are represented as xtUML deployments of `project`s in
textual MASL. Currently Ciera only natively supports xtUML
components/interfaces for system modeling, however even support of this is
limited. Any project that requires components to be deployed across
network or other boundaries must provide custom port implementations.

This work will introduce the "MASL style" system idiom where domains
expose hooks to the outside world and define terminators that represent
external service calls. A logically separate unit will wire these
domains together. This separate unit may be generated and simply consist of
mapping of method calls on a single target, however the design shall allow
for flexibility to implement this mapping by hand so that domains may be
easily deployed anywhere.

===== 4.2.2 Independent compilation and deployment of domains (components)

As a natural dependency of <<4.2.1 Deployments>>, independent compilation
of domains shall be supported. Currently, Ciera may only be used to
generate system models made up of one or more components linked together
with interfaces, and the output is a single JAR that contains the whole
application. While it is possible to generate each individual component as
a separate application and use custom port code to link them together,
this change will simplify the process and allow multi-domain models to be
generated as a collection of independent JARs that may be regenerated
independently and redeployed without regenerating all components.

Additional features related to independent compilation and deployment under consideration:

- Option to run all components in one run context (thread) or separate run contexts
- Dynamic class loading to support re-starting a single component without stopping the system
- Native support for socket interface to support executing components in
  separate processes or on separate networked targets

===== 4.2.3 Additional MASL-specific features

Additional features specific to MASL shall be analyzed. All core features
of the action language must be supported, however some fringe features
such as native timer support, type characteristics, etc must be evaluated
on whether or not to include in this work.

=== 5 Design

==== 5.1 High level overview

A new compiler in the chain shall be introduced called `tool-core-masl`.
This application will combine the metamodel from Stratus and the target
architecture model from Ciera core to load textual MASL and convert to
Ciera and render. The output will be a set of Java sources and optionally
instances of the Ciera core metamodel to be used later in the chain of
model compilers (e.g. SQL instance loading/dumping or RSL templates).

A new target shall be added to the Ciera Maven plugin to allow this new
model compiler to be configured for a project.

The Ciera target model shall be extended in a backwards compatible way to
add support for additional features as needed.

New model compilers may be introduced for features such as persistent
instance populations if that is deemed to be a requirement.

=== 6 Work required

==== 6.0 Analyze Stratus model completeness and identify any pitfalls

==== 6.1 Analyze Ciera target model for coverage of the MASL language (expecting > 90% coverage)

==== 6.2 Determine required feature set for MASL users (beyond existing translation)

==== 6.3 Integrate Stratus parsing and instance loading into a Ciera model compiler

==== 6.4 Write transformations between the Stratus source model and Ciera target model

==== 6.5 Implement deployment support

==== 6.6 Implement independent compilation support

==== 6.7 Implement additional MASL-specific features

==== 6.8 Test

=== 7 Implementation Comments

None

=== 8 Acceptance Test

TODO

=== 9 User Documentation

TODO

=== 10 Code Changes

- fork/repository: your_fork/repo_name
- branch: your_branch_name_here

----
 Put the file list here
----

=== 11 Document References

. [[dr-1]] https://support.onefact.net/issues/12094[12094 - Support MASL translation]
. [[dr-2]] https://support.onefact.net/issues/10525[10525 - Deployments]
. [[dr-3]] https://support.onefact.net/issues/11794[11794 - Stratus project]
