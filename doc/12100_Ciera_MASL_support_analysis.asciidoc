== Ciera target support for MASL analysis

=== 1 Abstract

This note analyzes the Ciera target architecture model for completeness with
respect to the MASL language. Differences between xtUML and MASL that may
affect compatibility are also considered.

=== 2 Introduction and Background

This analysis is done in the context of the Jay project <<dr-1>> <<dr-2>>
<<dr-3>>

A model of the MASL language (OOA of MASL) has been created along with a
parser/loader (Stratus). That model will be the primary basis of this analysis.
<<dr-4>> <<dr-5>> <<dr-6>> <<dr-7>>

A Java-based code generator and C++ architecture exist to produce C++ sources
from MASL models. The parser and code generator of this project were the
primary source material for the Stratus project and will be used to clarify the
analysis. <<dr-8>>

The latest MASL reference manual will also be referenced. <<dr-9>>

=== 3 Requirements

3.1 Analyze the gaps in the Ciera architecture model with respect to MASL
translation support

=== 4 Analysis

The following analysis breaks down support into three different areas:
structual, action language statements, and action language expressions. Most of
the gaps are directly or indirectly related to action semantics. Each section
will summarize the gap and present potential design proposals.

4.1 Structural gaps

4.1.1 Projects/Deployments

The Ciera architecture does not support MASL projects (Deployments). It
supports the component style of system modeling in xtUML. An issue is already
open to address this gap as a separate task. <<dr-10>>

4.1.2 Polymorphic events

The MASL modeling language supports polymorphic events by delivering the event
to each class instance in the subtype/supertype hierarchy in sequence. If an
instance does not handle that event, it is passed down to the next subtype in
the chain. If any event along the chain "cannot happen", an exception is raised
and execution of that activity stops.

Ciera does not currently support polymorphic events even for xtUML/OAL models.
This project will need to introduce support for MASL style polymorphic events
as well as xtUML style where the event can only be handled at one level in the
subtype/supertype hierarchy.

4.1.3 Exceptions

MASL has the ability to define custom exceptions. This element needs to be
added to the Ciera model. MASL additionally provides the ability to define
modeled exception handlers. This also needs to be added to Ciera.

The Ciera runtime has an `XtumlException` class wich is the supertype to
several architectural exception types (e.g. `CannotHappenException`). The way
in which these execptions are propagated must be re-evaluated to ensure it is
compatible with the semantics of MASL exceptions. Ciera currently provides the
ability to implement a hand written exception handler that handles exceptions
at the event dispatch level.

4.1.4 Type system

The Ciera type system is woefully incomplete. At the moment, apart from xtUML
built in types, only enumerated types, and user defined types (to a very
limited degree) are supported. MASL itself has a very full featured type system
including constraints, rich collection types, structures, dictionaries, arrays,
type characteristics and more. This will in itself be a project to address.

4.2 Action language

4.2.1 Statements

4.2.1.1 Raise statements (exceptions)

Raise statements must be added to create custom exceptions (see section 4.1.3)

4.2.1.2 Pragmas

Pragmas must be parsed from the model and loaded as marks. Code will be added
to Stratus to create instances of the marking model <<dr-11>>. for
pragmas. A `features.mark` file will need to be created to specify the set of
available marks.

4.2.1.3 IO stream handling

MASL supports reading data from a "device" type using the stream operators.
This needs to be added to the Ciera architecture along with support for the
"device" type as part of the type system update.

4.2.1.4 Case statement

The case statement needs to be added to the Ciera model.

4.2.1.5 Native timer support

Ciera implements the `TIM` bridges as a wrapper around timer support defined in
the Ciera runtime. Some tweaks may need to be made to support MASL timers (e.g.
schedule statement allows setting a timer for an absolute time or a delay).
Timer statements will be added to the Ciera model and generate code which uses
the time API directly without a bridge call. The possibility of OAL supporting
time natively will be considered in the design of the API and Ciera
architecture model.

4.2.1.6 Delay statement (sleep)

Delay/sleep needs to be added to the Ciera model and runtime API. Adding a
`TIM` bridge for sleep will be considered. It needs to be understood whether
"delay" blocks the thread of control or whether other events/timers may be
handled during the delay.

4.2.1.7 Erase statement

MASL supports the deleting of elements from a dictionary using "erase". This
needs to be added to the model and implemented in the type system (see 4.2.2.3
below).

4.2.2 Expressions

4.2.2.1 Explicit casting

Ciera supports/relies on casting in some cases (e.g. implicit truncation
promotion of real to integer), however it is flimsy. The cast mechanism needs
to be revisited while the type system is being updated. Cast is already part of
the model, but simply needs to be added as a translation function.

4.2.2.2 Characteristics

MASL supports type characteristics (meta fields on certain types) such as
"length". These characteristics will be implemented as methods on their
respective types. Characteristic access will be added to the Ciera model.
Specific available characteristics and their types must be added as PEI to the
model with the built in types.

4.2.2.3 Dictionary handling

Dictionary support will be added during the type system update. Specific access
to dictionaries setting/getting values, removing keys, "contains"
(characteristic) must be added to the Ciera architecture model.

4.2.2.4 Array handling

Additional array support will be added during the type system update.
Currently, support for arrays is limited and only supports dynamically sized
arrays and does not support multi-dimensional arrays. All types of array access
will also be supported in action language through the Ciera architecture model.

4.2.2.5 Structure handling

Structure support will be added during the type system update. All types of
structure access will be supported in action langauge through the Ciera
architecture model.

4.2.2.6 Ordering sets

Ciera has limited support for ordering sets in select statements through a
dummy `SORT` bridge <<dr-12>>. This support needs to be extended to
support sorting by multiple keys. It is already in the Ciera architecture
model.

4.2.2.7 Literals

With the type system update, many new literals will need to be supported. For
example `console` is a device literal that represents standard input and
standard output (depending on whether or not you are reading or writing). MASL
aslo supports character literals for end of line and ISO 8601:2004 timestamp
and duration literals among others. Support for these literals will be added to
the rest of the support for translating literals.

4.3 Backwards support for xtUML/OAL

For many of these (e.g. support for structured types), it makes sense to also
support translation of the corresponding xtUML/OAL constructs. This will be
done as time allows but is not considered a requirement for this work.

=== 5 Work required

The following issues have been raised as part of the Jay project to track the
large independent projects identified in the analysis. Miscellaneous items not
covered by one of the following issues will be tracked as part of the parent
task #12107 <<dr-13>>

5.1 Project jay: Support polymorphic events <<dr-14>>
5.2 Project jay: Support user-defined exceptions and refine exception handling <<dr-15>>
5.3 Project jay: Update Ciera type system to support MASL types <<dr-16>>
5.4 Project jay: Update stratus to load marks from pragmas <<dr-17>>
5.5 Project jay: Support native timer support in Ciera <<dr-18>>

=== 6 Document References

. [[dr-1]] https://support.onefact.net/issues/12094[Support MASL translation (project jay)]
. [[dr-2]] https://github.com/xtuml/ciera/wiki/12094_support_masl[Initial project analysis]
. [[dr-3]] https://docs.google.com/document/d/1o2FmFKkuxJRxYEzXfX4qE7Do72EkdSlKgjC3rxirmOg/edit#heading=h.x1vg2cgahpkg[Jay SOW]
. [[dr-4]] https://support.onefact.net/issues/11745[Parse MASL into xtUML meta-model of MASL activity (analysis)]
. [[dr-5]] https://github.com/xtuml/mc/tree/master/doc/notes/11745_loadmasl[Stratus engineering notes]
. [[dr-6]] https://github.com/xtuml/mc/tree/master/model/ooamasl[OOA of MASL model]
. [[dr-7]] https://github.com/xtuml/mc/tree/master/model/stratus[Stratus model]
. [[dr-8]] https://github.com/xtuml/masl[MASL compiler project repository]
. [[dr-9]] https://raw.githubusercontent.com/xtuml/bridgepoint/master/src/org.xtuml.bp.doc/Reference/MASL/LanguageReference/current/maslrefman.pdf[MASL reference manual]
. [[dr-10]] https://support.onefact.net/issues/12104[Project jay: Deployments supported by Ciera (ooamasl)]
. [[dr-11]] https://github.com/xtuml/bridgepoint/tree/master/src/org.xtuml.bp.ui.marking[OOA of mark]
. [[dr-12]] https://xtuml.github.io/cieradoc/apidocs/latest/runtime/io/ciera/runtime/summit/util/SORT[SORT bridge documentation]
. [[dr-13]] https://support.onefact.net/issues/12107[Project jay: MASL specific features added to Ciera]
. [[dr-14]] https://support.onefact.net/issues/12257[Project jay: Support polymorphic events]
. [[dr-15]] https://support.onefact.net/issues/12258[Project jay: Support user-defined exceptions and refine exception handling]
. [[dr-16]] https://support.onefact.net/issues/12259[Project jay: Update Ciera type system to support MASL types]
. [[dr-17]] https://support.onefact.net/issues/12260[Project jay: Update stratus to load marks from pragmas]
. [[dr-18]] https://support.onefact.net/issues/12261[Project jay: Support native timer support in Ciera]
